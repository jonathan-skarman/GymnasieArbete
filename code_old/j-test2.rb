def size_verifier(txt_bin, img_bin_arr, aggression)
	p "verifier"


	#p (img_bin_arr.length - $start_position) * aggression
	#p txt_bin.length

	if ((img_bin_arr.length - $start_position) * aggression) < txt_bin.length
		raise "fml AHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHhh"
	end

	true
end

#str_bin is the string to be hidden in the image
#img_bin_arr is the binare data of the image, with each bit in an array
#aggression is an integer between 1 and 8, that decides how many bits to change in each byte
def hider(txt_bin, img_bin_arr, aggression)
	p "hider"
	p txt_bin
	txt_bin += $break_line
	p txt_bin

	size_verifier(txt_bin, img_bin_arr, aggression)

	i = $start_position
	j = 0
	while i < img_bin_arr.length && txt_bin[j+(aggression-1)] != nil
		img_bin_arr[i][(0..(aggression-1))] = txt_bin[(j..(j+(aggression-1)))]
		i += 1
		j += aggression
	end

	if j < txt_bin.length
		num = txt_bin.length - j
		img_bin_arr[i][(0..(num-1))] = txt_bin[(j..(j+num-1))]
	end

	p img_bin_arr
	img_bin_arr
end

$start_position = 0 #skippar 40 bytes
$aggression = 3
$break_line = "01111111"

txt = "01100001011000100110001101100100"

arr = ["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"]

["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"]
["01100000", "00000000", "01000000", "11000000", "00100000", "00100000", "10000000", "01100000", "01100000", "00100000", "00000000", "11100000", "11100000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"]

#01100001 01100010 01100011 01111100 ??????
#oh fuck är det att när den inte kan lägga hela saken fukar den bara
p hider(txt, arr, $aggression)

a = ["00000000", "00000000"]
a[0][(0..2)] = "11"
#p a

str = "01"
#p str[(0..10)]

#arr = ["01000010", "10110010", "01101100", "11000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "01101100", "00000000", "00000000", "00000000", "00010100", "00000000", "00000000", "00000000", "00001000", "00000000", "00000000", "00000000", "00001000", "00000000", "00000000", "00000000", "10000000", "00000000", "00011000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "11000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00000010", "10011100", "11110111", "10110101", "01010101", "00011111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "10110101", "01010101", "00011111", "00000010", "10011100", "11110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "00101011", "10010101", "11001011", "00100101", "10010010", "11000101", "10010011", "11001001", "10010011", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "00100001", "00000001", "10101111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11100101", "11110010", "01100101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00000001", "11001110", "11110110", "00110010", "10001101", "01000100", "10101001", "10001011", "00111110", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11010100", "11000100", "01110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "00110101", "01011010", "11010101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "10110100", "00110011", "00111110", "00010110", "00011111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "11111111", "11111111", "11111111", "11010101", "01011011", "11101001", "10100110", "00101001", "01100010", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "01010010", "11001101", "10010100", "00000000", "01001111", "11111111", "00010110", "00011111", "11111111", "11111111", "11111111", "11111111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "10011100", "01101001", "11101001", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "10010001", "11101110", "01011110", "00110010", "10001101", "01000100", "10100010", "10011101", "01111100", "10111000", "10011011", "00110101", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00010110", "00011111", "11111111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "11010010", "11110101", "10010100", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "10111001", "11001010", "00011001", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "11111111", "11111111", "11111111", "11101101", "11011111", "11111111", "00001000", "11001111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "10101101", "01101101", "10010101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "10010011", "11001001", "10010011", "11111111", "11111111", "11111111", "11101101", "11011111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00110010", "10001101", "01000100", "00110010", "10001101", "01000100", "11010010", "11110101", "10010100", "11111111", "11111111", "11111111", "10110101", "01011010", "00110101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "00100101", "10010010", "11000101", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00110010", "10001101", "01000100", "11010010", "11110101", "10010100", "10101100", "10001001", "00110101", "11111110", "11001101", "11111111", "10100111", "00110011", "10100111", "01010101", "00101010", "10010101", "00100101", "10010010", "11000101", "11100101", "11110010", "01100101", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "10001000", "10110001", "01101111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "01001100", "01101010", "01001101", "10101100", "10001001", "00110101", "11100100", "11111110", "11111111", "11100100", "11111110", "11111111", "11111110", "11001101", "11111111", "10100111", "00110011", "10100111", "11011101", "11101110", "01011101", "10111011", "01011101", "00111011", "11100001", "00011111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "11000100", "11000100", "01110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "10100100", "10100010", "10101111", "01110100", "11000001", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "00000100", "00101111", "11111111", "00000000", "01001111", "11111111", "00000000", "01001111", "11111111", "10001000", "10110001", "01101111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "01110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "10111110", "10011110", "10101111", "11111111", "11111111", "11111111", "11111111", "11111111", "11111111", "11101101", "11011111", "11111111", "01000100", "01110001", "01101111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "01110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "11010100", "11000100", "01110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "10010100", "10000100", "01110111", "00000010", "10011100", "11110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00100100", "00111000", "10110111", "00000010", "10011100", "11110111", "10110101", "01010101", "00011111"]


def searcher(bin_arr)
	puts "Searching"

	i = $start_position
	str_temp = ""

	j = 0
	str_temp_2 = ""

	arr_temp = []


	while i < bin_arr.length
		str_temp += bin_arr[i][(0..($aggression-1))]
		i += 1
		#p str_temp.length

		#todo: fixa så den fungerar med alla aggression
		while j < str_temp.length
			str_temp_2 += str_temp[j]

			if str_temp_2.length % 8 == 0
				p str_temp_2
				arr_temp.append(str_temp_2)
				p arr_temp
				#p arr_temp[arr_temp.length - 1]
				if is_breakline(str_temp_2)
					return arr_temp.join
				end
				str_temp_2 = ""
			end

			j += 1
		end
	end

	return arr_temp.join
end

def is_breakline(bin_str)
	bin_str == $break_line
end



#p searcher(["01100000", "00000000", "01000000", "11000000", "00100000", "00100000", "10000000", "01100000", "01100000", "00100000", "00000000", "11100000", "11100000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"])
0110000101100010011000110110010001111111
01100001011000100110001101100100011111100000000000000000


txt = "01100001011000100110001101100100"
0110000101100010011000110110010001111111
01100001011000100110001101100100
arr = ["00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000"]
p searcher(hider(txt, arr, $aggression))
